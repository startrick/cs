{"version":3,"sources":["components/knowledge-base/knowledge-base-topic.js","components/knowledge-base/knowledge-base-view.js","components/knowledge-base/knowledge-base-content.js","App.js","index.js"],"names":["KnowledgeBaseTopicCollapsed","props","className","onClick","getSelectedTopic","helpTopic","id","fields","topic","KnowledgeBaseTopicExpanded","isCopied","event","copyToClipboard","dangerouslySetInnerHTML","__html","response","KnowledgeBaseView","helpTopics","keywords","map","keyword","filter","getSelectedFilter","Keywords","selectedTopicId","includes","KnowledgeBaseContent","getKnowledgeBaseContent","a","headers","axios","get","then","status","setState","data","records","getKeywords","textToCopy","target","innerText","navigator","clipboard","writeText","state","bind","this","React","Component","App","basename","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b246dcb.chunk.js","sourcesContent":["import React from 'react';\nimport '../../tailwind.output.css';\nimport {FiPlus, FiMinus} from 'react-icons/fi';\n\nfunction KnowledgeBaseTopicCollapsed(props){\n        return(\n        <div className='cursor-pointer p-4 border-b border-gray-200'  onClick={() => props.getSelectedTopic(props.helpTopic.id)}>\n            <div className='flex flex-row items-center justify-between font-light text-lg'>\n                <p className='text-gray-700'>{props.helpTopic.fields.topic}</p>\n                <p className='text-purple-600'><FiPlus/></p>\n            </div>\n        </div>\n    )\n}\n\nexport {KnowledgeBaseTopicCollapsed};\n\nfunction KnowledgeBaseTopicExpanded(props){\n        return(\n        <div className='bg-gray-50 border-b border-gray-200'>\n            <div className='cursor-pointer flex flex-row items-center justify-between font-light text-lg pb-2 pt-4 px-4' onClick={() => props.getSelectedTopic('')}>\n                <p className='text-gray-800'>{props.helpTopic.fields.topic}</p>\n                <p className='text-purple-600'><FiMinus/></p>\n            </div>\n            {props.isCopied\n            ? <div className='relative'>\n                {/* <p className='cursor-pointer text-gray-600 font-light text-base pb-6 px-4' onClick={(event) =>  props.copyToClipboard(event)}>{props.helpTopic.fields.response}</p> */}\n                <p className='cursor-pointer text-gray-600 font-light text-base pb-6 px-4' onClick={(event) =>  props.copyToClipboard(event)} dangerouslySetInnerHTML={{__html: props.helpTopic.fields.response}}></p>\n                <p className='w-full absolute bottom-0 text-xs bg-purple-600 text-white text-center font-light py-0.5'>Copied to clipboard</p>\n            </div>\n            // : <p className='cursor-pointer text-gray-600 font-light text-base pb-6 px-4' onClick={(event) =>  props.copyToClipboard(event)}>{props.helpTopic.fields.response}</p>\n            : <p className='cursor-pointer text-gray-600 font-light text-base pb-6 px-4' onClick={(event) =>  props.copyToClipboard(event)} dangerouslySetInnerHTML={{__html: props.helpTopic.fields.response}}></p>\n            }\n            {/* <p className='cursor-pointer text-gray-600 font-light text-base pb-4 px-4' onClick={(event) =>  props.copyToClipboard(event)}>{props.helpTopic.fields.response}</p> */}\n        </div>\n    )\n}\n\nexport {KnowledgeBaseTopicExpanded};","import React from 'react';\nimport '../../tailwind.output.css';\nimport {KnowledgeBaseTopicExpanded, KnowledgeBaseTopicCollapsed} from './knowledge-base-topic';\n\nfunction KnowledgeBaseView(props){\n    const keywords = props.keywords.map((keyword) => {\n        return(\n            props.filter === keyword.id\n            ? <div \n                key={keyword.id} \n                className='rounded-full py-2 px-4 border border-purple-600 bg-purple-600 cursor-pointer text-white mx-2 my-1 sm:my-2 text-xs'\n                onClick={() => props.getSelectedFilter('')}\n                >{keyword.fields.Keywords}\n            </div>\n            : <div \n                key={keyword.id} \n                className='rounded-full py-2 px-4 border border-purple-600 hover:bg-purple-600 hover:text-white cursor-pointer text-gray-900 mx-2 my-1 sm:my-2 text-xs'\n                onClick={() => props.getSelectedFilter(keyword.id)}\n                >{keyword.fields.Keywords}\n            </div>\n        )\n    }\n    )\n\n    let helpTopics;\n\n    {props.filter === ''\n    ? helpTopics = props.helpTopics\n        .map((helpTopic) => {\n            return(\n                props.selectedTopicId === helpTopic.id\n                ? <KnowledgeBaseTopicExpanded key={helpTopic.id} helpTopic={helpTopic} copyToClipboard={props.copyToClipboard} getSelectedTopic={props.getSelectedTopic} isCopied={props.isCopied}/>\n                : <KnowledgeBaseTopicCollapsed key={helpTopic.id} helpTopic={helpTopic} copyToClipboard={props.copyToClipboard} getSelectedTopic={props.getSelectedTopic}/>\n            )\n        }\n        )\n    : helpTopics = props.helpTopics\n        .filter((helpTopic) => helpTopic.fields.keywords.includes(props.filter))\n        .map((helpTopic) => {\n            return(\n                props.selectedTopicId === helpTopic.id\n                ? <KnowledgeBaseTopicExpanded key={helpTopic.id} helpTopic={helpTopic} copyToClipboard={props.copyToClipboard} getSelectedTopic={props.getSelectedTopic} isCopied={props.isCopied}/>\n                : <KnowledgeBaseTopicCollapsed key={helpTopic.id} helpTopic={helpTopic} copyToClipboard={props.copyToClipboard} getSelectedTopic={props.getSelectedTopic}/>\n            )\n        }\n        )\n    }\n\n    return(\n        <div className='flex flex-col items-center mt-10 px-4'>\n            <div className='w-full sm:w-160'>\n                    <p className='text-4xl font-light text-gray-900 px-4'>Support Assistant</p>\n                    <p className='text-xl font-light pt-2 pb-4 text-gray-500 px-4'>Open the relevant topic, tap on the reponse to copy and paste it in Crisp/ Email.</p>\n                    <div className='flex flex-wrap px-2'>\n                        {keywords}\n                    </div>\n                    {helpTopics}\n            </div>\n        </div>\n    )\n}\n\nexport default KnowledgeBaseView;\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport KnowledgeBaseView from './knowledge-base-view';\n\nclass KnowledgeBaseContent extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            helpTopics: [],\n            textToCopy: '',\n            selectedTopicId: '',\n            isCopied: false,\n            keywords: [],\n            filter: '',\n        }\n        this.getKnowledgeBaseContent = this.getKnowledgeBaseContent.bind(this);\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n        this.getSelectedTopic = this.getSelectedTopic.bind(this);\n        this.getKeywords = this.getKeywords.bind(this);\n        this.getSelectedFilter = this.getSelectedFilter.bind(this);\n    }\n\n    getKnowledgeBaseContent = async() => {\n\n        let baseURL = \"https://api.airtable.com/v0/appZD9qRVCfSRenHA/Customer%20Support%20Queries\"\n        let headers = { 'authorization': \"Bearer key04kzdBL9zJQCwp\" }\n    \n        await axios.get(baseURL, {headers: headers})\n        .then((response) => {\n            if(response.status===200){\n                this.setState({\n                    helpTopics: response.data.records,\n                    isCopied: false,\n                })\n            }\n        }\n        )\n    }\n\n    getSelectedTopic = async(selectedTopicId) => {\n        await this.setState({\n            selectedTopicId: selectedTopicId,\n            isCopied: false,\n        })\n    }\n\n    getKeywords = async() => {\n\n        let baseURL = \"https://api.airtable.com/v0/appZD9qRVCfSRenHA/Keywords\"\n        let headers = { 'authorization': \"Bearer key04kzdBL9zJQCwp\" }\n    \n        await axios.get(baseURL, {headers: headers})\n        .then((response) => {\n            if(response.status===200){\n                this.setState({\n                    keywords: response.data.records,\n                })\n            }\n        }\n        )\n    }\n\n    getSelectedFilter = async(filter) => {\n        await this.setState({\n            filter: filter,\n        })\n    }\n\n    copyToClipboard = async(event) => {\n        // console.log(event.target.innerText);\n        await this.setState({\n            textToCopy: event.target.innerText,\n            isCopied: true,\n        });\n        navigator.clipboard.writeText(this.state.textToCopy);\n    }\n\n    componentDidMount(){\n        this.getKnowledgeBaseContent();\n        this.getKeywords();\n    }\n\n    render(){\n        // console.log(this.state);\n        return(\n            <div>\n                <KnowledgeBaseView \n                    helpTopics={this.state.helpTopics} \n                    keywords={this.state.keywords} \n                    copyToClipboard={this.copyToClipboard} \n                    selectedTopicId={this.state.selectedTopicId} \n                    getSelectedTopic={this.getSelectedTopic} \n                    isCopied={this.state.isCopied}\n                    getSelectedFilter={this.getSelectedFilter}\n                    filter={this.state.filter}\n                />\n            </div>\n        )\n    }\n}\n\nexport default KnowledgeBaseContent;","import React from 'react';\nimport './tailwind.output.css';\n\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport KnowledgeBaseContent from './components/knowledge-base/knowledge-base-content';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      {/* <Router>\n        <Suspense fallback={<div>Loading...</div>}> */}\n          <Switch>\n            <Route exact path='/' component={KnowledgeBaseContent}/>\n          </Switch>\n        {/* </Suspense>\n      </Router> */}\n    </HashRouter>\n      \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router> \n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}